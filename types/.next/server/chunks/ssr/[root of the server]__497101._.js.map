{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/edama/dev/next_js_tutorial/network-chat-application/components/cytoscape/CytoscapeGraph.tsx"],"sourcesContent":["\"use client\"\n\nimport React, { useEffect, useRef } from \"react\"\nimport { NodeSingular,LayoutOptions } from \"cytoscape\"\nimport cytoscape from \"cytoscape\"\nimport type { NodeData } from \"@/types/node_types\"\nimport fcose from 'cytoscape-fcose';// Sample graph data\nimport { FcoseLayoutOptions } from \"cytoscape-fcose\"\nimport { on } from \"events\"\nimport { count } from \"console\"\nimport { randomInt } from \"crypto\"\n\nconst graphData = {\n  nodes: [\n    { data: { id: \"1\", label: \"Node 1\", description: \"This is node 1\", color: \"#ff5733\" } },\n    { data: { id: \"2\", label: \"Node 2\", description: \"This is node 2\", color: \"#33ff57\" } },\n    { data: { id: \"3\", label: \"Node 3\", description: \"This is node 3\", color: \"#3357ff\" } },\n    { data: { id: \"4\", label: \"Node 4\", description: \"This is node 4\", color: \"#f3ff33\" } },\n    { data: { id: \"5\", label: \"Node 5\", description: \"This is node 5\", color: \"#ff33f5\" } },\n  ],\n  edges: [\n    { data: { id: \"e1\", source: \"1\", target: \"2\" } },\n    { data: { id: \"e2\", source: \"1\", target: \"3\" } },\n    { data: { id: \"e3\", source: \"2\", target: \"4\" } },\n    { data: { id: \"e4\", source: \"3\", target: \"5\" } },\n    { data: { id: \"e5\", source: \"4\", target: \"5\" } },\n  ],\n}\n\n//関数型のアノテーションを返す。通常はname: stringみたいに書くが、ここでは、関数が何の引数を受け取って、何を返すかを明示的に示している。\n//この場合、引数はonNodeClickという関数で、引数は一つ。NodeData型で、そして何も返さない。\ninterface CytoscapeGraphProps {\n  onNodeClick: (nodeData: NodeData) => void\n}\n\n\nexport default function CytoscapeGraph({ onNodeClick }: CytoscapeGraphProps) {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const cyRef = useRef<cytoscape.Core | null>(null)\n  // const [count,setCount] = React.useState(0)\n\n  //初回処理\n  useEffect(() => {\n    if (!containerRef.current) return\n\n    \n    cytoscape.use( fcose ); // register extension\n    const cy = cytoscape({\n      container: containerRef.current,\n      elements: [...graphData.nodes, ...graphData.edges],\n      layout: {\n        name: \"fcose\",\n        animate: true,\n        animateDuration: 500,\n        animateEasing: \"ease-out\",\n        nodeRepulsion: (node:NodeSingular) => 4500, // ノード間の反発力\n        gravity: 0.25, // 重力\n        idealEdgeLength: 50, // エッジの長さ\n      }as LayoutOptions,\n      style: [\n        {\n          selector: \"node\",\n          style: {\n            \"background-color\": \"data(color)\",\n            label: \"data(label)\",\n            color: \"#fff\",\n            \"text-outline-color\": \"#000\",\n            \"text-outline-width\": 1,\n            \"font-size\": 14,\n            width: 40,\n            height: 40,\n          },\n        },\n        {\n          selector: \"edge\",\n          style: {\n            width: 2,\n            \"line-color\": \"#ccc\",\n            \"curve-style\": \"bezier\",\n          },\n        },\n      ],\n\n    });\n\n    cyRef.current = cy // Set cy instance to cyRef\n\n    \n    console.log(\"Hello chatbot\")\n\n    \n  }, []);\n\n  //ボタンがクリックされたときの処理\n  useEffect(() => {\n    const cy = cyRef.current\n    if (cy === null) return\n\n    // Add click event listener to nodes\n    cy.on(\"tap\", \"node\", (event) => {\n      const node = event.target\n      const nodeData: NodeData = {\n        id: node.id(),\n        query: node.data(\"label\"),\n        response: node.data(\"description\"),\n        edges: node.connectedEdges().length,\n        color: node.data(\"color\"),\n      }\n      let count = randomInt(100).toString();\n      let id = count  // 新しいノードの ID\n      let sourceId = node.id() // クリックされたノードの ID\n\n      // デバッグ用出力\n      console.log(\"Existing nodes before add:\", cy.nodes().map(n => n.data()))\n      console.log(\"Existing edges before add:\", cy.edges().map(e => e.data()))\n\n      // 新しいノードとエッジを追加\n      const newNode = cy.add([\n        {\n          group: \"nodes\",\n          data: { id: id, label: \"add\", color: \"#33ff57\" },\n          position: { x: Math.random() * 500, y: Math.random() * 500 }, // ランダム位置\n        },\n        {\n          group: \"edges\",\n          data: { id: `edge-${sourceId}-${id}`, source: sourceId, target: id },\n        },\n      ])\n\n      // デバッグ用出力\n      console.log(\"New node added:\", newNode.map(n => n.data()))\n      console.log(\"Existing nodes after add:\", cy.nodes().map(n => n.data()))\n      console.log(\"Existing edges after add:\", cy.edges().map(e => e.data()))\n\n      // ノード追加後にレイアウトを適用（アニメーションなし）\n      const layout = cy.layout({\n        name: \"fcose\",\n        animate: false,\n        fit: true, // 追加\n        padding: 30, // 追加\n        nodeDimensionsIncludeLabels: true, // 追加\n        nodeRepulsion: (node: NodeSingular) => 4500, // ノード間の反発力\n        gravity: 0.25, // 重力\n        idealEdgeLength: 50, // エッジの長さ\n      } as FcoseLayoutOptions)\n      layout.run()\n\n      // デバッグ用出力\n      console.log(\"Layout run completed\")\n      console.log(\"Existing nodes after layout:\", cy.nodes().map(n => n.data()))\n      console.log(\"Existing edges after layout:\", cy.edges().map(e => e.data()))\n\n      console.log(\"clicked\")\n\n      onNodeClick(nodeData)\n    })\n\n    // // Clean up\n    // return () => {\n    //   if (cyRef.current) {\n    //     cyRef.current.destroy()\n    //   }\n    // }\n  }, [onNodeClick])\n\n  return <div ref={containerRef} className=\"w-full h-full\" />\n}\n\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":["file:///home/edama/dev/next_js_tutorial/network-chat-application/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB"}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":["file:///home/edama/dev/next_js_tutorial/network-chat-application/components/ui/textarea.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,sMAAM,UAAU,CAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,6QACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AACA,SAAS,WAAW,GAAG"}},
    {"offset": {"line": 299, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":["file:///home/edama/dev/next_js_tutorial/network-chat-application/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AAEA;AAEA;AAHA;;;;;;AAKA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,ySACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,sMAAM,UAAU,CAC7B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG"}},
    {"offset": {"line": 359, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":["file:///home/edama/dev/next_js_tutorial/network-chat-application/components/sidebar/Sidebar.tsx"],"sourcesContent":["import { Link, X } from \"react-feather\"\nimport type { NodeData } from \"@/types/node_types\"\nimport { Textarea } from \"../ui/textarea\"\nimport { Label } from \"@radix-ui/react-label\"\nimport { Button } from \"../ui/button\"\n\n\ninterface SidebarProps {\n    isOpen: boolean\n    onClose: () => void\n    nodeData: NodeData | null\n  }\n  \n  export default function Sidebar({ isOpen, onClose, nodeData }: SidebarProps) {\n    return (\n      <div\n        className={`fixed top-0 right-0 w-1/3 h-full bg-white shadow-lg transform transition-transform duration-300 ease-in-out z-10 ${\n          isOpen ? \"translate-x-0\" : \"translate-x-full\"\n        }`}\n      >\n        <div className=\"p-6 h-full overflow-auto\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold\">○○に関する情報</h2>\n            <button onClick={onClose} className=\"p-1 rounded-full hover:bg-gray-100\" aria-label=\"Close sidebar\">\n              <X className=\"h-6 w-6\" />\n            </button>\n          </div>\n  \n          {nodeData ? (\n            <div className=\"space-y-4\">\n              <div className=\"w-16 h-16 rounded-full mb-4\" style={{ backgroundColor: nodeData.color }} />\n\n              <div>\n                <h3 className=\"text-lg font-semibold\">質問:</h3>\n                <p>○○とはなんでしょうか</p>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-semibold \">AIの回答:</h3>\n                <p>○○とは△△ということです。</p>\n              </div>\n  \n              <div className=\"grid w-full gap-1.5\">\n                <Label htmlFor=\"message\" className=\"mt-4 font-semibold\">つづけて質問</Label>\n                <Textarea placeholder=\"入力してください\" id=\"message\" />\n                <p className=\"text-sm text-muted-foreground mt-0 text-xs\">\n                  Ctrl + Enterで送信\n                </p>\n                <Button className=\"\">送信</Button>\n              </div>\n  \n              {/* <div>\n                <h3 className=\"text-lg font-semibold\">Description</h3>\n                <p>{nodeData.response}</p>\n              </div> */}\n  \n             \n  \n              {/* Additional node information can be added here */}\n              {/* <div className=\"mt-8 p-4 bg-gray-50 rounded-lg\">\n                <h3 className=\"text-lg font-semibold mb-2\">Actions</h3>\n                <div className=\"flex flex-col gap-2\">\n                  <button className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\">Edit Node</button>\n                  <button className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300\">\n                    View Connections\n                  </button>\n                </div>\n              </div> */}\n            </div>\n          ) : (\n            <p>Select a node to view details</p>\n          )}\n        </div>\n      </div>\n    )\n  }\n  \n  "],"names":[],"mappings":";;;;AAEA;AAEA;AAJA;AAGA;;;;;;AAUiB,SAAS,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAgB;IACzE,qBACE,8OAAC;QACC,WAAW,CAAC,iHAAiH,EAC3H,SAAS,kBAAkB,oBAC3B;kBAEF,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAG,WAAU;sCAAqB;;;;;;sCACnC,8OAAC;4BAAO,SAAS;4BAAS,WAAU;4BAAqC,cAAW;sCAClF,cAAA,8OAAC,sLAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;;;;;;;;;;;;gBAIhB,yBACC,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;4BAA8B,OAAO;gCAAE,iBAAiB,SAAS,KAAK;4BAAC;;;;;;sCAEtF,8OAAC;;8CACC,8OAAC;oCAAG,WAAU;8CAAwB;;;;;;8CACtC,8OAAC;8CAAE;;;;;;;;;;;;sCAGL,8OAAC;;8CACC,8OAAC;oCAAG,WAAU;8CAAyB;;;;;;8CACvC,8OAAC;8CAAE;;;;;;;;;;;;sCAGL,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,iKAAA,CAAA,QAAK;oCAAC,SAAQ;oCAAU,WAAU;8CAAqB;;;;;;8CACxD,8OAAC,6HAAA,CAAA,WAAQ;oCAAC,aAAY;oCAAW,IAAG;;;;;;8CACpC,8OAAC;oCAAE,WAAU;8CAA6C;;;;;;8CAG1D,8OAAC,2HAAA,CAAA,SAAM;oCAAC,WAAU;8CAAG;;;;;;;;;;;;;;;;;yCAsBzB,8OAAC;8BAAE;;;;;;;;;;;;;;;;;AAKb"}},
    {"offset": {"line": 542, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":["file:///home/edama/dev/next_js_tutorial/network-chat-application/app/test/page.tsx"],"sourcesContent":["\"use client\"\n\nimport { useState } from \"react\"\nimport CytoscapeGraph from \"@/components/cytoscape/CytoscapeGraph\"\nimport Sidebar from \"@/components/sidebar/Sidebar\"\nimport type { NodeData } from \"@/types/node_types\"\n\nexport default function Home() {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [selectedNode, setSelectedNode] = useState<NodeData | null>(null)\n\n  const handleNodeClick = (nodeData: NodeData) => {\n    setSelectedNode(nodeData)\n    setSidebarOpen(true)\n  }\n\n  const closeSidebar = () => {\n    setSidebarOpen(false)\n  }\n\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-between\">\n      <div className=\"relative flex w-full h-screen\">\n        <div className={`flex-1 transition-all duration-300 ${sidebarOpen ? \"pr-[33.333%]\" : \"\"}`}>\n          <CytoscapeGraph onNodeClick={handleNodeClick} /> \n        </div>\n        <Sidebar isOpen={sidebarOpen} onClose={closeSidebar} nodeData={selectedNode} />\n      </div>\n      \n    </main>\n  )\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAOe,SAAS;IACtB,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAmB;IAElE,MAAM,kBAAkB,CAAC;QACvB,gBAAgB;QAChB,eAAe;IACjB;IAEA,MAAM,eAAe;QACnB,eAAe;IACjB;IAEA,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAW,CAAC,mCAAmC,EAAE,cAAc,iBAAiB,IAAI;8BACvF,cAAA,8OAAC,0IAAA,CAAA,UAAc;wBAAC,aAAa;;;;;;;;;;;8BAE/B,8OAAC,iIAAA,CAAA,UAAO;oBAAC,QAAQ;oBAAa,SAAS;oBAAc,UAAU;;;;;;;;;;;;;;;;;AAKvE"}},
    {"offset": {"line": 610, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}